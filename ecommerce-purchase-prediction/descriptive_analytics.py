# -*- coding: utf-8 -*-
"""Descriptive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4PNjqozxcopPAi2KLT6RF7FY2Qux7kq
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Load dataset (Upload your file in Google Colab before running this)
from google.colab import drive
drive.mount('/content/drive')
df= pd.read_excel("/content/drive/MyDrive/Colab Notebooks/Dissertation/dataset.xlsx")

# Display basic dataset information
print("Dataset Overview:")
print(df.info())

# Check for missing values
print("\nMissing Values:\n", df.isnull().sum())

# Descriptive statistics for numerical columns
print("\nDescriptive Statistics:\n", df.describe())

# **1. Advanced Descriptive Statistics**
print("\nSkewness of Numerical Features:\n", df.skew(numeric_only=True))
print("\nKurtosis of Numerical Features:\n", df.kurt(numeric_only=True))

# **2. Class Distribution (Purchases vs No Purchases)**
revenue_counts = df["Revenue"].value_counts()
custom_colors = ["#0096c7", "#ff4500"]
plt.figure(figsize=(5,4))
sns.barplot(x=revenue_counts.index, y=revenue_counts.values, palette=custom_colors,edgecolor='black', width= 0.4)
plt.xticks(ticks=[0,1], labels=["No Purchase", "Purchase"])

plt.xlabel("Purchase Status",fontname="Calibri", fontsize=10)
plt.ylabel("Total Revenue", fontsize=10)
plt.title("Distribution of Purchases (Revenue)", fontsize=10)
sns.set_style("white")
plt.grid(False)  # Disables the grid completely
plt.show()

plt.figure(figsize=(4,4))
#colors = plt.cm.viridis([0.3, 0.8])  # Using Viridis colormap for better contrast
custom_colors = ["#0096c7", "#ff4500"]
labels = ["No Purchase", "Purchase"]


# Create the pie chart
plt.pie(df["Revenue"].value_counts(), labels=labels, autopct='%1.1f%%',
        startangle=140, colors=custom_colors , wedgeprops={'edgecolor': 'black'})

plt.title("Distribution of Purchases (Revenue)", fontsize=10)
plt.show()

# **3. Analyzing Page Visit Types**
page_types = ["Administrative", "Informational", "ProductRelated"]
page_visits = df[page_types].sum()

plt.figure(figsize=(8,5))
sns.barplot(x=page_visits.index, y=page_visits.values, palette="viridis",edgecolor='black')
plt.xlabel("Page Type")
plt.ylabel("Total Visits")
plt.title("Total Visits by Page Type")
plt.show()

# **4. Page Visits vs. Purchase Correlation**
page_revenue_correlation = df.groupby("Revenue")[page_types].mean()
print("\nPage Visit vs Revenue Correlation:\n", page_revenue_correlation)

# **5. Correlation Matrix (Heatmap)**
plt.figure(figsize=(12,8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="BuPu", fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

# **6. Histograms of Numerical Features**
df.hist(figsize=(12, 10), bins=30, edgecolor="black")
plt.suptitle("Distribution of Numerical Features", fontsize=16)
plt.show()

# **7. Visitor Type Distribution**
plt.figure()
sns.countplot(data=df, x="VisitorType", palette="viridis",edgecolor='black')
plt.xlabel("Visitor Type")
plt.ylabel("Count")
plt.title("Distribution of Visitor Types")
plt.show()

# **8. Traffic Source Distribution**
plt.figure()
sns.countplot(data=df, x="TrafficType", palette="viridis",edgecolor='black')
plt.xlabel("Traffic Source")
plt.ylabel("Count")
plt.title("Traffic Type Distribution")
plt.xticks(rotation=90)
plt.show()

# Convert boolean values to integer
df["Weekend"] = df["Weekend"].astype(int)
df["Revenue"] = df["Revenue"].astype(int)

# Set plot style
plt.style.use("ggplot")

# 1. Revenue Percentage by Visitor Type (Modified Colors & Labels)
visitor_revenue = df.groupby("VisitorType")["Revenue"].mean() * 100

plt.figure(figsize=(5,4))
custom_colors = ["#0096c7", "#ff4500","#ffb300"]
sns.barplot(x=visitor_revenue.index, y=visitor_revenue.values, palette=custom_colors,edgecolor='black',width=0.6)
plt.xlabel("Type of Visitor", fontsize=10)
plt.ylabel("Revenue Conversion Rate (%)", fontsize=10)
plt.title("Revenue Percentage by Different Visitor Types", fontsize=10)
sns.set_style("white")
plt.grid(False)  # Disables the grid completely
plt.ylim(0, max(visitor_revenue.values) + 5)  # Adjust Y-axis
plt.xticks(rotation=0)  # Rotate X-axis labels slightly
plt.show()

# 2. Page Visited Type Distribution (Modified Colors & Labels)
page_types = ["Administrative", "Informational", "ProductRelated"]
page_visits = df[page_types].sum()

plt.figure(figsize=(5,4))
sns.barplot(x=page_visits.index, y=page_visits.values, palette="viridis",edgecolor='black', width=0.6)
plt.xlabel("Types of Pages Visited", fontsize=10)
plt.ylabel("Total Number of Visits", fontsize=10)
plt.title("Distribution of Page Visits", fontsize=10)
plt.xticks(rotation=0)
plt.show()

# 3. Revenue Percentage by Weekend (Modified Colors & Labels)
weekend_revenue = df.groupby("Weekend")["Revenue"].mean() * 100
weekend_labels = ["Weekday", "Weekend"]

plt.figure(figsize=(5,4))
sns.barplot(x=weekend_labels, y=weekend_revenue.values, palette=custom_colors,edgecolor='black',width=0.4)
plt.xlabel("Day Type", fontsize=10)
plt.ylabel("Revenue Percentage (%)", fontsize=10)
plt.title("Revenue Percentage by Weekday vs Weekend", fontsize=10)
plt.ylim(0, max(weekend_revenue.values) + 5)
plt.show()

# 1 . Set plot style
plt.style.use("ggplot")

# Revenue by Visitor Type (Stacked Bar Chart)
visitor_counts = df.groupby(["VisitorType", "Revenue"]).size().unstack()

# Reorder the index to make "Returning_Visitor" appear first
order = ["Returning_Visitor", "New_Visitor", "Other"]
visitor_counts = visitor_counts.reindex(order)

# Plot
visitor_counts.plot(kind="bar", stacked=True, figsize=(5,4), color=custom_colors, edgecolor='black', width=0.5)
plt.xlabel("Type of Visitor", fontsize=10)
plt.ylabel("Total Visitors", fontsize=10)
plt.title("Revenue Breakdown by Visitor Type", fontsize=10)
plt.legend(title="Revenue", labels=["No Purchase", "Purchase"])
plt.xticks(rotation=0)
plt.show()


# 2. Page Visited Type Distribution with Revenue Segmentation (Stacked Bar Chart)
df_melted = df.melt(id_vars=["Revenue"], value_vars=["Administrative", "Informational", "ProductRelated"],
                    var_name="PageType", value_name="VisitCount")

page_counts = df_melted.groupby(["PageType", "Revenue"]).sum().unstack()
colors = plt.cm.viridis([0.2, 0.8])  # Adjust brightness levels
page_counts.plot(kind="bar", stacked=True, figsize=(5,4),color=colors,edgecolor='black', width=0.4)
plt.xlabel("Types of Pages Visited", fontsize=10)
plt.ylabel("Total Number of Visits", fontsize=10)
plt.title("Page Visits Breakdown (Distinction by Purchase)", fontsize=10)
plt.legend(title="Revenue", labels=["No Purchase", "Purchase"])
plt.xticks(rotation=0)
plt.show()

# Convert 'Month' to categorical type with ordered months
month_order = ["Jan", "Feb", "Mar", "Apr", "May", "June", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
df["Month"] = pd.Categorical(df["Month"], categories=month_order, ordered=True)

# Calculate revenue trends per month
monthly_revenue = df.groupby("Month")["Revenue"].mean() * 100  # Convert to percentage

# Plot line graph
plt.figure(figsize=(10,6))
sns.lineplot(x=monthly_revenue.index, y=monthly_revenue.values, marker="o", color="red", linewidth=2.5)
plt.xlabel("Month", fontsize=12)
plt.ylabel("Revenue Percentage (%)", fontsize=12)
plt.title("Revenue Trends Across Months", fontsize=14)
plt.xticks(rotation=45)
plt.grid(True, linestyle="--", alpha=0.6)
plt.show()

# Convert 'Month' to categorical type with ordered months
month_order = ["Jan", "Feb", "Mar", "Apr", "May", "June", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
df["Month"] = pd.Categorical(df["Month"], categories=month_order, ordered=True)

# Calculate monthly totals
monthly_revenue = df.groupby("Month")["Revenue"].sum()  # Absolute count of purchases
monthly_visits = df.groupby("Month")["Revenue"].count()  # Total visitors (sessions)
monthly_exit_rate = df.groupby("Month")["ExitRates"].mean() * 100  # Avg exit rate per month

# -----------------------------------------------------------
# 1️⃣ Stacked Bar Chart: Purchases vs. Non-Purchases per Month
# -----------------------------------------------------------
monthly_data = df.groupby(["Month", "Revenue"]).size().unstack().fillna(0)

plt.figure(figsize=(6,5))
monthly_data.plot(kind="bar", stacked=True, figsize=(12,6), color=custom_colors)
plt.xlabel("Month", fontsize=10)
plt.ylabel("Total Sessions", fontsize=10)
plt.title("Monthly Purchases vs. Non-Purchases", fontsize=11)
plt.xticks(rotation=0, fontsize=12)
plt.legend(title="Revenue", labels=["No Purchase", "Purchase"])
plt.grid(axis="y", linestyle="--", alpha=0.6)
plt.show()



# -----------------------------------------------------------
# 3️⃣ Heatmap: Exit Rates, Revenue, and Visits Per Month
# -----------------------------------------------------------
heatmap_data = pd.DataFrame({
    "Total Visitors": monthly_visits,
    "Total Purchases": monthly_revenue,
    "Avg Exit Rate (%)": monthly_exit_rate
})

plt.figure(figsize=(7,5))
sns.heatmap(heatmap_data, annot=True, cmap="Wistia", fmt=".1f", linewidths=0.5)
plt.title("Heatmap of Monthly Trends", fontsize=11)
plt.xlabel("Metrics", fontsize=10)
plt.ylabel("Month", fontsize=10)
plt.xticks(rotation=0, fontsize=10)
plt.show()

# Convert 'Month' to categorical type with ordered months
month_order = ["Jan", "Feb", "Mar", "Apr", "May", "June", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
df["Month"] = pd.Categorical(df["Month"], categories=month_order, ordered=True)
# Calculate absolute revenue counts per month
monthly_revenue = df.groupby("Month")["Revenue"].sum()  # Absolute count of purchases

# Plot line graph with absolute values
plt.figure(figsize=(10,6))
sns.lineplot(x=monthly_revenue.index, y=monthly_revenue.values, marker="o", color="purple", linewidth=2.5)
plt.xlabel("Month", fontsize=12)
plt.ylabel("Total Purchases (Revenue)", fontsize=12)
plt.title("Total Revenue Trend Across Months", fontsize=14)
plt.xticks(rotation=45)
plt.grid(True, linestyle="--", alpha=0.6)
plt.show()

# Set plot style
plt.style.use("ggplot")

# -----------------------------------------------
# 1. Link Between Page Type and Exit Rate
# -----------------------------------------------

# Scatter plot for Administrative Pages vs Exit Rate
plt.figure(figsize=(6,3))
sns.scatterplot(x=df["Administrative"], y=df["ExitRates"], alpha=0.5, color="#471164FF")
plt.xlabel("Administrative Pages Visited")
plt.ylabel("Exit Rate")
plt.title("Exit Rate vs. Administrative Pages Visited")
plt.grid(True, linestyle="--", alpha=0.6)
plt.show()

# Scatter plot for Informational Pages vs Exit Rate
plt.figure(figsize=(8,5))
sns.scatterplot(x=df["Informational"], y=df["ExitRates"], alpha=0.5, color="#31688EFF")
plt.xlabel("Informational Pages Visited")
plt.ylabel("Exit Rate")
plt.title("Exit Rate vs. Informational Pages Visited")
plt.grid(True, linestyle="--", alpha=0.6)
plt.show()

# Scatter plot for Product-Related Pages vs Exit Rate
plt.figure(figsize=(8,5))
sns.scatterplot(x=df["ProductRelated"], y=df["ExitRates"], alpha=0.5, color="#27AD81FF")
plt.xlabel("Product-Related Pages Visited")
plt.ylabel("Exit Rate")
plt.title("Exit Rate vs. Product-Related Pages Visited")
plt.grid(True, linestyle="--", alpha=0.6)
plt.show()

# -----------------------------------------------
# 2. Link Between Page Values and Page Types
# -----------------------------------------------

# Boxplot for Page Values across Page Types
df_melted = df.melt(id_vars=["PageValues"], value_vars=["Administrative", "Informational", "ProductRelated"],
                    var_name="PageType", value_name="VisitCount")

plt.figure(figsize=(8,5))
sns.boxplot(x="PageType", y="PageValues", data=df_melted, palette="coolwarm")
plt.xlabel("Page Type")
plt.ylabel("Page Value")
plt.title("Page Values Across Different Page Types")
plt.grid(True, linestyle="--", alpha=0.6)
plt.show()

# -----------------------------------------------
# 3. Link Between Weekend and Purchase Behavior
# -----------------------------------------------

# Stacked bar chart: Weekend vs Revenue
weekend_counts = df.groupby(["Weekend", "Revenue"]).size().unstack()

plt.figure(figsize=(6,5))
weekend_counts.plot(kind="bar", stacked=True, figsize=(6,5))
plt.xlabel("Day Type", fontsize=12)
plt.ylabel("Total Visitors", fontsize=12)
plt.title("Revenue Breakdown by Weekend vs Weekday", fontsize=14)
plt.xticks(ticks=[0,1], labels=["Weekday", "Weekend"], rotation=0)
plt.legend(title="Revenue", labels=["No Purchase", "Purchase"])
plt.grid(axis='y', linestyle="--", alpha=0.6)
plt.show()

# Pie chart for Weekend vs Revenue
plt.figure(figsize=(6,6))
weekend_labels = ["Weekday Purchases", "Weekend Purchases"]
weekend_revenue = df[df["Revenue"] == 1]["Weekend"].value_counts()
colors = plt.cm.viridis([0.3, 0.7])  # Viridis color palette

plt.pie(weekend_revenue, labels=weekend_labels, autopct='%1.1f%%',
        startangle=140, colors=colors, wedgeprops={'edgecolor': 'black'})
plt.title("Proportion of Purchases on Weekdays vs. Weekends", fontsize=14)
plt.show()